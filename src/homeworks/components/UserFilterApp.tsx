import React, { useState, useMemo, useCallback } from 'react';
import UserItem from './UserItem';

interface User {
  id: number;
  name: string;
  age: number;
}

const USERS: User[] = [
  { id: 1, name: '–ê–Ω–Ω–∞', age: 25 },
  { id: 2, name: '–û–ª–µ–≥', age: 30 },
  { id: 3, name: '–Ü—Ä–∏–Ω–∞', age: 22 },
  { id: 4, name: '–°–µ—Ä–≥—ñ–π', age: 28 },
  { id: 5, name: '–ú–∞—Ä–∏–Ω–∞', age: 35 },
];

const UserFilterApp: React.FC = () => {
  const [search, setSearch] = useState('');
  const [sortAsc, setSortAsc] = useState(true);

  // useMemo –¥–ª—è –º–µ–º–æ—ñ–∑–∞—Ü—ñ—ó —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
  // –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ: [search, sortAsc]
  const filteredAndSortedUsers = useMemo(() => {
    console.log('üîÑ –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è');

    // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ —ñ–º'—è–º (—Ä–µ—î—Å—Ç—Ä –Ω–µ –≤—Ä–∞—Ö–æ–≤—É—î—Ç—å—Å—è)
    const filtered = USERS.filter((user) =>
      user.name.toLowerCase().includes(search.toLowerCase()),
    );

    // –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –≤—ñ–∫–æ–º
    const sorted = filtered.sort((a, b) => {
      return sortAsc ? a.age - b.age : b.age - a.age;
    });

    return sorted;
  }, [search, sortAsc]);

  // useCallback –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
  const handleUserClick = useCallback((user: User) => {
    alert(`${user.name}, ${user.age} —Ä–æ–∫—ñ–≤`);
  }, []);

  return (
    <div className="mx-auto max-w-2xl space-y-6 p-6">
      <div className="text-center">
        <h2 className="mb-2 text-2xl font-bold text-gray-800">
          –§—ñ–ª—å—Ç—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—î—é
        </h2>
        <p className="text-gray-600">
          –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è useMemo, useCallback —Ç–∞ React.memo
        </p>
      </div>

      {/* –ü–æ–ª–µ –ø–æ—à—É–∫—É */}
      <div>
        <input
          type="text"
          value={search}
          onChange={(e) => setSearch(e.target.value)}
          placeholder="–ü–æ—à—É–∫ –∑–∞ —ñ–º'—è–º..."
          className="w-full rounded-md border border-gray-300 px-3 py-2"
        />
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è */}
      <div>
        <button
          onClick={() => setSortAsc(!sortAsc)}
          className="rounded-md bg-blue-500 px-4 py-2 text-white hover:bg-blue-600"
        >
          –°–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞ –≤—ñ–∫–æ–º ({sortAsc ? '–∑–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º' : '–∑–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º'})
        </button>
      </div>

      {/* –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ */}
      <div className="space-y-2">
        {filteredAndSortedUsers.map((user) => (
          <UserItem key={user.id} user={user} onUserClick={handleUserClick} />
        ))}
      </div>

      {/* –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é */}
      <div className="rounded-lg border border-blue-200 bg-blue-50 p-4">
        <h4 className="mb-2 font-semibold text-blue-800">üí° –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó:</h4>
        <ul className="space-y-1 text-sm text-blue-700">
          <li>
            ‚Ä¢ <strong>useMemo</strong>: –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏
            –∑–º—ñ–Ω—ñ [search, sortAsc]
          </li>
          <li>
            ‚Ä¢ <strong>useCallback</strong>: handleUserClick —Å—Ç–∞–±—ñ–ª—å–Ω–∞ –º—ñ–∂
            —Ä–µ–Ω–¥–µ—Ä–∞–º–∏
          </li>
          <li>
            ‚Ä¢ <strong>React.memo</strong>: UserItem —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –∑–º—ñ–Ω—ñ
            –ø—Ä–æ–ø—Å—ñ–≤
          </li>
          <li>‚Ä¢ –í—ñ–¥–∫—Ä–∏–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –ª–æ–≥–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó</li>
        </ul>
      </div>
    </div>
  );
};

export default UserFilterApp;
