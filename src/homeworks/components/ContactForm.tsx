import { useState, useRef, useEffect } from 'react';
import Block from '../../components/Block';

interface FormData {
  name: string;
  email: string;
  message: string;
  category: string;
}

interface FormErrors {
  name?: string;
  email?: string;
  message?: string;
  category?: string;
}

const CATEGORIES = [
  { value: '', label: '–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é' },
  { value: '–ø–∏—Ç–∞–Ω–Ω—è', label: '–ü–∏—Ç–∞–Ω–Ω—è' },
  { value: '—Å–∫–∞—Ä–≥–∞', label: '–°–∫–∞—Ä–≥–∞' },
  { value: '—ñ–Ω—à–µ', label: '–Ü–Ω—à–µ' },
];

export default function ContactForm() {
  const [formData, setFormData] = useState<FormData>({
    name: '',
    email: '',
    message: '',
    category: '',
  });

  const [errors, setErrors] = useState<FormErrors>({});
  const [successMessage, setSuccessMessage] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  const nameInputRef = useRef<HTMLInputElement>(null);

  // –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –∏–º–µ–Ω–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    if (nameInputRef.current) {
      nameInputRef.current.focus();
    }
  }, []);

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
  const validateForm = (): boolean => {
    const newErrors: FormErrors = {};

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
    if (!formData.name.trim()) {
      newErrors.name = "–Ü–º'—è —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º";
    } else if (formData.name.trim().length < 2) {
      newErrors.name = "–Ü–º'—è –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏";
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è email
    if (!formData.email.trim()) {
      newErrors.email = "Email —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º";
    } else {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(formData.email)) {
        newErrors.email = 'Email –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —Å–∏–º–≤–æ–ª @';
      }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    if (!formData.message.trim()) {
      newErrors.message = "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º";
    } else if (formData.message.trim().length < 10) {
      newErrors.message = '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 10 —Å–∏–º–≤–æ–ª—ñ–≤';
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (!formData.category) {
      newErrors.category = '–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π
  const handleInputChange =
    (field: keyof FormData) =>
    (
      e: React.ChangeEvent<
        HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement
      >,
    ) => {
      setFormData((prev) => ({
        ...prev,
        [field]: e.target.value,
      }));

      // –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤–≤–æ–¥–µ
      if (errors[field]) {
        setErrors((prev) => ({
          ...prev,
          [field]: undefined,
        }));
      }
    };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!validateForm()) {
      return;
    }

    setIsSubmitting(true);

    // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    setTimeout(() => {
      setSuccessMessage('–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ');
      setFormData({
        name: '',
        email: '',
        message: '',
        category: '',
      });
      setErrors({});
      setIsSubmitting(false);

      // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –∏–º–µ–Ω–∏
      if (nameInputRef.current) {
        nameInputRef.current.focus();
      }

      // –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        setSuccessMessage('');
      }, 3000);
    }, 1000);
  };

  // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
  const handleReset = () => {
    setFormData({
      name: '',
      email: '',
      message: '',
      category: '',
    });
    setErrors({});
    setSuccessMessage('');

    // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –∏–º–µ–Ω–∏
    if (nameInputRef.current) {
      nameInputRef.current.focus();
    }
  };

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <Block className="block">
        <h2 className="mb-4 text-xl font-bold">
          –î–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è 7: –§–æ—Ä–º–∞ –∑–≤'—è–∑–∫—É
        </h2>
        <p className="text-gray-600">
          –ö–µ—Ä–æ–≤–∞–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ —Ñ–æ—Ä–º–∏ –∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é —Ç–∞ UX-–ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è–º–∏
        </p>
      </Block>

      {/* –§–æ—Ä–º–∞ */}
      <Block className="block">
        <h3 className="mb-4 text-lg font-semibold">–§–æ—Ä–º–∞ –∑–≤'—è–∑–∫—É</h3>

        {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ */}
        {successMessage && (
          <div className="mb-6 rounded-md border border-green-400 bg-green-100 p-4 text-green-700">
            ‚úÖ {successMessage}
          </div>
        )}

        <form onSubmit={handleSubmit} className="space-y-4">
          {/* –ü–æ–ª–µ –Ü–º'—è */}
          <div>
            <label
              htmlFor="name"
              className="mb-2 block text-sm font-medium text-gray-700"
            >
              –Ü–º'—è <span className="text-red-500">*</span>
            </label>
            <input
              ref={nameInputRef}
              id="name"
              type="text"
              value={formData.name}
              onChange={handleInputChange('name')}
              className={`w-full rounded-md border px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:outline-none ${
                errors.name ? 'border-red-500' : 'border-gray-300'
              }`}
              placeholder="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è..."
            />
            {errors.name && (
              <p className="mt-1 text-sm text-red-600">{errors.name}</p>
            )}
          </div>

          {/* –ü–æ–ª–µ Email */}
          <div>
            <label
              htmlFor="email"
              className="mb-2 block text-sm font-medium text-gray-700"
            >
              Email <span className="text-red-500">*</span>
            </label>
            <input
              id="email"
              type="email"
              value={formData.email}
              onChange={handleInputChange('email')}
              className={`w-full rounded-md border px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:outline-none ${
                errors.email ? 'border-red-500' : 'border-gray-300'
              }`}
              placeholder="your@email.com"
            />
            {errors.email && (
              <p className="mt-1 text-sm text-red-600">{errors.email}</p>
            )}
          </div>

          {/* –ü–æ–ª–µ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è */}
          <div>
            <label
              htmlFor="message"
              className="mb-2 block text-sm font-medium text-gray-700"
            >
              –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è <span className="text-red-500">*</span>
            </label>
            <textarea
              id="message"
              value={formData.message}
              onChange={handleInputChange('message')}
              rows={4}
              className={`w-full rounded-md border px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:outline-none ${
                errors.message ? 'border-red-500' : 'border-gray-300'
              }`}
              placeholder="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è..."
            />
            {errors.message && (
              <p className="mt-1 text-sm text-red-600">{errors.message}</p>
            )}
          </div>

          {/* –ü–æ–ª–µ –¢–∏–ø –∑–∞–ø–∏—Ç—É */}
          <div>
            <label
              htmlFor="category"
              className="mb-2 block text-sm font-medium text-gray-700"
            >
              –¢–∏–ø –∑–∞–ø–∏—Ç—É <span className="text-red-500">*</span>
            </label>
            <select
              id="category"
              value={formData.category}
              onChange={handleInputChange('category')}
              className={`w-full rounded-md border px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:outline-none ${
                errors.category ? 'border-red-500' : 'border-gray-300'
              }`}
            >
              {CATEGORIES.map((cat) => (
                <option key={cat.value} value={cat.value}>
                  {cat.label}
                </option>
              ))}
            </select>
            {errors.category && (
              <p className="mt-1 text-sm text-red-600">{errors.category}</p>
            )}
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ */}
          <div className="flex flex-wrap gap-3 pt-4">
            <button
              type="submit"
              disabled={isSubmitting}
              className="rounded-md bg-blue-500 px-6 py-2 text-white transition-colors hover:bg-blue-600 disabled:cursor-not-allowed disabled:bg-blue-300"
            >
              {isSubmitting ? '–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è...' : '–ù–∞–¥—ñ—Å–ª–∞—Ç–∏'}
            </button>

            <button
              type="button"
              onClick={handleReset}
              disabled={isSubmitting}
              className="rounded-md bg-gray-500 px-6 py-2 text-white transition-colors hover:bg-gray-600 disabled:cursor-not-allowed disabled:bg-gray-300"
            >
              –û—á–∏—Å—Ç–∏—Ç–∏ —Ñ–æ—Ä–º—É
            </button>
          </div>
        </form>
      </Block>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ */}
      <Block className="block border border-blue-200 bg-blue-50">
        <h4 className="mb-2 font-medium text-blue-900">
          üìù –ü—Ä–∞–≤–∏–ª–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó:
        </h4>
        <ul className="space-y-1 text-sm text-blue-800">
          <li>
            ‚Ä¢ <strong>–Ü–º'—è:</strong> –û–±–æ–≤'—è–∑–∫–æ–≤–µ, –º—ñ–Ω. 2 —Å–∏–º–≤–æ–ª–∏
          </li>
          <li>
            ‚Ä¢ <strong>Email:</strong> –û–±–æ–≤'—è–∑–∫–æ–≤–µ, –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ @
          </li>
          <li>
            ‚Ä¢ <strong>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</strong> –û–±–æ–≤'—è–∑–∫–æ–≤–µ, –º—ñ–Ω. 10 —Å–∏–º–≤–æ–ª—ñ–≤
          </li>
          <li>
            ‚Ä¢ <strong>–¢–∏–ø –∑–∞–ø–∏—Ç—É:</strong> –ó–Ω–∞—á–µ–Ω–Ω—è –∑ –ø–µ—Ä–µ–ª—ñ–∫—É: "–ü–∏—Ç–∞–Ω–Ω—è",
            "–°–∫–∞—Ä–≥–∞", "–Ü–Ω—à–µ"
          </li>
        </ul>
      </Block>
    </div>
  );
}
