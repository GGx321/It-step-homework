import { useState, useMemo, useEffect } from 'react';

export default function TipCalculator() {
  const [billAmount, setBillAmount] = useState('');
  const [tipPercentage, setTipPercentage] = useState('');
  const [numberOfPeople, setNumberOfPeople] = useState('');
  const [errors, setErrors] = useState<Record<string, string>>({});

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤ useEffect
  useEffect(() => {
    const newErrors: Record<string, string> = {};

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã —Å—á–µ—Ç–∞
    if (billAmount && billAmount.trim()) {
      const billValue = parseFloat(billAmount);
      if (isNaN(billValue) || billValue <= 0) {
        newErrors.billAmount = '–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É (–±—ñ–ª—å—à–µ 0)';
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —á–∞–µ–≤—ã—Ö
    if (tipPercentage && tipPercentage.trim()) {
      const tipValue = parseFloat(tipPercentage);
      if (isNaN(tipValue) || tipValue < 0) {
        newErrors.tipPercentage = '–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫ (0 –∞–±–æ –±—ñ–ª—å—à–µ)';
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª—é–¥–µ–π
    if (numberOfPeople && numberOfPeople.trim()) {
      const peopleValue = parseInt(numberOfPeople);
      if (isNaN(peopleValue) || peopleValue < 1) {
        newErrors.numberOfPeople = '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª—é–¥–µ–π –º–∞—î –±—É—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 1';
      }
    }

    setErrors(newErrors);
  }, [billAmount, tipPercentage, numberOfPeople]);

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç
  const calculation = useMemo(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∏ –Ω–µ—Ç –æ—à–∏–±–æ–∫
    if (
      !billAmount ||
      !tipPercentage ||
      !numberOfPeople ||
      Object.keys(errors).length > 0
    ) {
      return null;
    }

    const bill = parseFloat(billAmount);
    const tip = parseFloat(tipPercentage);
    const people = parseInt(numberOfPeople);

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π
    if (
      isNaN(bill) ||
      bill <= 0 ||
      isNaN(tip) ||
      tip < 0 ||
      isNaN(people) ||
      people < 1
    ) {
      return null;
    }

    const tipAmount = (bill * tip) / 100;
    const totalAmount = bill + tipAmount;
    const perPersonAmount = totalAmount / people;

    return {
      bill,
      tip,
      people,
      tipAmount,
      totalAmount,
      perPersonAmount,
    };
  }, [billAmount, tipPercentage, numberOfPeople, errors]);

  const handleInputChange = (field: string, value: string) => {
    switch (field) {
      case 'billAmount':
        setBillAmount(value);
        break;
      case 'tipPercentage':
        setTipPercentage(value);
        break;
      case 'numberOfPeople':
        setNumberOfPeople(value);
        break;
    }
  };

  const isFormValid =
    billAmount &&
    tipPercentage &&
    numberOfPeople &&
    Object.keys(errors).length === 0;

  // –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã —á–∞–µ–≤—ã—Ö
  const presetTips = [10, 15, 18, 20, 25];

  return (
    <div className="rounded-lg border-2 border-gray-300 bg-white p-6 shadow-sm">
      <h3 className="mb-6 text-lg font-semibold text-gray-800">
        –ó–∞–≤–¥–∞–Ω–Ω—è 3: –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —á–∞–π–æ–≤–∏—Ö
      </h3>

      <div className="space-y-4">
        {/* –°—É–º–º–∞ —Å—á–µ—Ç–∞ */}
        <div>
          <label
            htmlFor="billAmount"
            className="mb-1 block text-sm font-medium text-gray-700"
          >
            –°—É–º–∞ —Ä–∞—Ö—É–Ω–∫—É (–≥—Ä–Ω) *
          </label>
          <input
            type="number"
            id="billAmount"
            value={billAmount}
            onChange={(e) => handleInputChange('billAmount', e.target.value)}
            className={`w-full rounded-md border px-3 py-2 focus:ring-2 focus:ring-offset-2 focus:outline-none ${
              errors.billAmount
                ? 'border-red-300 focus:ring-red-500'
                : 'border-gray-300 focus:ring-blue-500'
            }`}
            placeholder="1000"
            min="0"
            step="0.01"
          />
          {errors.billAmount && (
            <p className="mt-1 text-sm text-red-600">{errors.billAmount}</p>
          )}
        </div>

        {/* –ü—Ä–æ—Ü–µ–Ω—Ç —á–∞–µ–≤—ã—Ö */}
        <div>
          <label
            htmlFor="tipPercentage"
            className="mb-1 block text-sm font-medium text-gray-700"
          >
            –í—ñ–¥—Å–æ—Ç–æ–∫ —á–∞–π–æ–≤–∏—Ö (%) *
          </label>
          <input
            type="number"
            id="tipPercentage"
            value={tipPercentage}
            onChange={(e) => handleInputChange('tipPercentage', e.target.value)}
            className={`w-full rounded-md border px-3 py-2 focus:ring-2 focus:ring-offset-2 focus:outline-none ${
              errors.tipPercentage
                ? 'border-red-300 focus:ring-red-500'
                : 'border-gray-300 focus:ring-blue-500'
            }`}
            placeholder="15"
            min="0"
            step="0.1"
          />
          {errors.tipPercentage && (
            <p className="mt-1 text-sm text-red-600">{errors.tipPercentage}</p>
          )}

          {/* –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã */}
          <div className="mt-2 flex flex-wrap gap-2">
            <span className="text-sm text-gray-600">–®–≤–∏–¥–∫–∏–π –≤–∏–±—ñ—Ä:</span>
            {presetTips.map((preset) => (
              <button
                key={preset}
                onClick={() =>
                  handleInputChange('tipPercentage', preset.toString())
                }
                className="rounded border bg-gray-100 px-2 py-1 text-xs transition-colors hover:bg-gray-200 focus:ring-1 focus:ring-blue-500 focus:outline-none"
              >
                {preset}%
              </button>
            ))}
          </div>
        </div>

        {/* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π */}
        <div>
          <label
            htmlFor="numberOfPeople"
            className="mb-1 block text-sm font-medium text-gray-700"
          >
            –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª—é–¥–µ–π *
          </label>
          <input
            type="number"
            id="numberOfPeople"
            value={numberOfPeople}
            onChange={(e) =>
              handleInputChange('numberOfPeople', e.target.value)
            }
            className={`w-full rounded-md border px-3 py-2 focus:ring-2 focus:ring-offset-2 focus:outline-none ${
              errors.numberOfPeople
                ? 'border-red-300 focus:ring-red-500'
                : 'border-gray-300 focus:ring-blue-500'
            }`}
            placeholder="2"
            min="1"
            step="1"
          />
          {errors.numberOfPeople && (
            <p className="mt-1 text-sm text-red-600">{errors.numberOfPeople}</p>
          )}
        </div>

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ */}
        {isFormValid && calculation && (
          <div className="mt-6 rounded-md border border-blue-200 bg-blue-50 p-4">
            <h4 className="mb-3 font-medium text-blue-800">
              üí∞ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É:
            </h4>
            <div className="space-y-2 text-sm text-blue-700">
              <div className="flex justify-between">
                <span>–°—É–º–∞ —Ä–∞—Ö—É–Ω–∫—É:</span>
                <span className="font-medium">
                  {calculation.bill.toFixed(2)} –≥—Ä–Ω
                </span>
              </div>
              <div className="flex justify-between">
                <span>–ß–∞–π–æ–≤—ñ ({calculation.tip}%):</span>
                <span className="font-medium">
                  {calculation.tipAmount.toFixed(2)} –≥—Ä–Ω
                </span>
              </div>
              <div className="flex justify-between border-t border-blue-200 pt-2">
                <span>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞:</span>
                <span className="font-bold">
                  {calculation.totalAmount.toFixed(2)} –≥—Ä–Ω
                </span>
              </div>
              <div className="-mx-2 flex justify-between rounded bg-blue-100 p-2">
                <span className="font-medium">–ö–æ–∂–µ–Ω –ø–ª–∞—Ç–∏—Ç—å:</span>
                <span className="text-lg font-bold">
                  {calculation.perPersonAmount.toFixed(2)} –≥—Ä–Ω
                </span>
              </div>
            </div>
          </div>
        )}

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className="mt-6 rounded-md bg-gray-50 p-3 text-xs text-gray-500">
          <p className="mb-1">
            üí° <strong>–ü–æ—Ä–∞–¥–∞:</strong> –í –£–∫—Ä–∞—ó–Ω—ñ –ø—Ä–∏–π–Ω—è—Ç–æ –∑–∞–ª–∏—à–∞—Ç–∏ 10-15%
            —á–∞–π–æ–≤–∏—Ö –∑–∞ —Ö–æ—Ä–æ—à–∏–π —Å–µ—Ä–≤—ñ—Å
          </p>
          <p>
            üßÆ <strong>–§–æ—Ä–º—É–ª–∞:</strong> (–†–∞—Ö—É–Ω–æ–∫ + –ß–∞–π–æ–≤—ñ) √∑ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª—é–¥–µ–π =
            –°—É–º–∞ –Ω–∞ –æ—Å–æ–±—É
          </p>
        </div>
      </div>
    </div>
  );
}
